//Q1
void main() {
  List<String> names = [
    'Ali',
    'Saba',
    'Mehrose',
    'Sobia',
    'Jawed',
    'Arooj',
    'Wahab',
    'Sami',
    'Azam',
    'Damini',
  ];

  for (String name in names) {
    print(name);
  }
}

//Q2
void main() {
  List<String> days = [];

  days.add('Monday');
  days.add('Tuesday');
  days.add('Wednesday');
  days.add('Thursday');
  days.add('Friday');
  days.add('Saturday');
  days.add('Sunday');

  for (String day in days) {
    print(day);
  }
}

//Q3
void main() {
  List<String> days = [
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
    'Sunday',
  ];

  while (days.isNotEmpty) {
    String removedDay = days.removeLast();
    print('Removed day: $removedDay');
  }
}

//Q4
void main() {
  List<int> numbers = [4, 2, 7, 1, 9, 5];

  int smallest = findSmallestNumber(numbers);
  int greatest = findGreatestNumber(numbers);

  print('Smallest number: $smallest');
  print('Greatest number: $greatest');
}

int findSmallestNumber(List<int> numbers) {
  int smallest = numbers[0];

  for (int i = 1; i < numbers.length; i++) {
    if (numbers[i] < smallest) {
      smallest = numbers[i];
    }
  }

  return smallest;
}

int findGreatestNumber(List<int> numbers) {
  int greatest = numbers[0];

  for (int i = 1; i < numbers.length; i++) {
    if (numbers[i] > greatest) {
      greatest = numbers[i];
    }
  }

  return greatest;
}
//Q5
void main() {
  Map<String, String> contactMap = {
    'Saba': '1234567890',
    'ALi': '9876543210',
    'Mustafa': '5555555555',
    'Sara': '9999999999',
  };

  List<String> keysWithLengthFour = contactMap.keys.where((key) => key.length == 4).toList();

  print('Keys with length 4:');
  for (String key in keysWithLengthFour) {
    print(key);
  }
}
//Q6
void main() {
  Map<String, Map<String, Map<String, String>>> world = {
    'Pakistan': {
      'details': {
        'capitalCity': 'Islamabad',
        'currency': 'Pakistani Rupee',
        'language': 'Urdu'
      }
    },
    'United States': {
      'details': {
        'capitalCity': 'Washington, D.C.',
        'currency': 'US Dollar',
        'language': 'English'
      }
    },
    'Japan': {
      'details': {
        'capitalCity': 'Tokyo',
        'currency': 'Japanese Yen',
        'language': 'Japanese'
      }
    }
  };

  String countryKey = 'Pakistan';
  Map<String, String> countryDetails = world[countryKey]['details'];

  print('Country: $countryKey');
  print('Capital City: ${countryDetails['capitalCity']}');
  print('Currency: ${countryDetails['currency']}');
}
//Q7
void main() {
  Map<String, double> expenses = {
    'sun': 3000.0,
    'mon': 3000.0,
    'tue': 3234.0,
  };

  if (expenses.containsKey('fri')) {
    expenses['fri'] = 5000.0;
  } else {
    expenses['fri'] = 5000.0;
  }

  print('Expenses: $expenses');
}
//Q8
void main() {
  List<Map<String, bool>> usersEligibility = [
    {'name': 'John', 'eligible': true},
    {'name': 'Alice', 'eligible': false},
    {'name': 'Mike', 'eligible': true},
    {'name': 'Sarah', 'eligible': true},
    {'name': 'Tom', 'eligible': false},
  ];

  usersEligibility.removeWhere((user) => user['eligible'] == false);

  print('Updated List:');
  print(usersEligibility);
}
//Q9
void main() {
  List<int> numbers = [5, 10, 3, 8, 2];
  int maxValue = findMaxValue(numbers);
  print('Maximum value: $maxValue');
}

int findMaxValue(List<int> numbers) {
  int maxValue = numbers[0];

  for (int i = 1; i < numbers.length; i++) {
    if (numbers[i] > maxValue) {
      maxValue = numbers[i];
    }
  }

  return maxValue;
}
//Q10
void main() {
  List<String> originalList = ['apple', 'banana', 'orange', 'banana', 'kiwi', 'apple'];
  List<String> newList = removeDuplicates(originalList);
  
  print('Original List: $originalList');
  print('New List without Duplicates: $newList');
}

List<String> removeDuplicates(List<String> list) {
  List<String> uniqueList = [];
  Set<String> seenElements = {};

  for (String element in list) {
    if (!seenElements.contains(element)) {
      uniqueList.add(element);
      seenElements.add(element);
    }
  }

  return uniqueList;
}
//Q11
void main() {
  List<int> originalList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  int n = 5;
  List<int> newList = getFirstNElements(originalList, n);
  
  print('Original List: $originalList');
  print('New List (First $n Elements): $newList');
}

List<int> getFirstNElements(List<int> list, int n) {
  if (n >= list.length) {
    return list;
  }
  
  return list.sublist(0, n);
}
//Q12
void main() {
  List<String> originalList = ['apple', 'banana', 'orange', 'kiwi'];
  List<String> reversedList = getReversedList(originalList);
  
  print('Original List: $originalList');
  print('Reversed List: $reversedList');
}

List<String> getReversedList(List<String> list) {
  List<String> reversedList = List.from(list.reversed);
  return reversedList;
}
//Q13
void main() {
  List<int> originalList = [1, 2, 3, 2, 4, 5, 1, 3];
  List<int> uniqueList = getUniqueElements(originalList);
  
  print('Original List: $originalList');
  print('Unique List: $uniqueList');
}

List<int> getUniqueElements(List<int> list) {
  List<int> uniqueList = [];
  Set<int> seenElements = {};

  for (int element in list) {
    if (!seenElements.contains(element)) {
      uniqueList.add(element);
      seenElements.add(element);
    }
  }

  return uniqueList;
}
//Q14
void main() {
  List<int> originalList = [5, 2, 8, 1, 3];
  List<int> sortedList = getSortedElements(originalList);
  
  print('Original List: $originalList');
  print('Sorted List: $sortedList');
}

List<int> getSortedElements(List<int> list) {
  List<int> sortedList = List.from(list);
  sortedList.sort();
  return sortedList;
}
//Q15
void main() {
  List<int> originalList = [-1, 2, -3, 4, -5, 6];
  List<int> positiveNumbers = getPositiveNumbers(originalList);
  
  print('Original List: $originalList');
  print('Positive Numbers: $positiveNumbers');
}

List<int> getPositiveNumbers(List<int> list) {
  List<int> positiveNumbers = list.where((number) => number > 0).toList();
  return positiveNumbers;
}
//Q16
void main() {
  List<int> originalList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  List<int> evenNumbers = getEvenNumbers(originalList);
  
  print('Original List: $originalList');
  print('Even Numbers: $evenNumbers');
}

List<int> getEvenNumbers(List<int> list) {
  List<int> evenNumbers = list.where((number) => number % 2 == 0).toList();
  return evenNumbers;
}
//Q17
void main() {
  List<int> originalList = [1, 2, 3, 4, 5];
  List<int> squaredList = getSquaredList(originalList);
  
  print('Original List: $originalList');
  print('Squared List: $squaredList');
}

List<int> getSquaredList(List<int> list) {
  List<int> squaredList = list.map((number) => number * number).toList();
  return squaredList;
}
//Q18
void main() {
  Map<String, dynamic> person = {
    'name': 'John',
    'age': 25,
    'isStudent': true,
  };

  bool isEligible = person['isStudent'] == true && person['age'] > 18;

  if (isEligible) {
    print('Eligible');
  } else {
    print('Not eligible');
  }
}
//Q19
void main() {
  Map<String, dynamic> product = {
    'name': 'Product ABC',
    'price': 10.99,
    'quantity': 0,
  };

  int quantity = product['quantity'];
  
  if (quantity > 0) {
    print('In stock');
  } else {
    print('Out of stock');
  }
}
//Q20
void main() {
  Map<String, dynamic> car = {
    'brand': 'Toyota',
    'color': 'Red',
    'isSedan': true,
  };

  bool isMatch = car['isSedan'] == true && car['color'] == 'Red';

  if (isMatch) {
    print('Match');
  } else {
    print('No match');
  }
}
//Q21
void main() {
  Map<String, dynamic> user = {
    'name': 'Ali Fareed',
    'isAdmin': true,
    'isActive': true,
  };

  bool isActiveAdmin = user['isAdmin'] == true && user['isActive'] == true;

  if (isActiveAdmin) {
    print('Active admin');
  } else {
    print('Not an active admin');
  }
}
//Q22
void main() {
  Map<String, int> cart = {
    'Apple': 5,
    'Orange': 3,
    'Banana': 2,
  };

  if (cart.containsKey('Apple')) {
    print('Product found');
  } else {
    print('Product not found');
  }
}
